some content...package com.nerys.model;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import java.io.Serializable;
/**
* Java
*/
import java.time.LocalDateTime;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.UUID;
/**
* Jmoordb
*/
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import com.jmoordb.core.annotation.Referenced;
import com.jmoordb.core.annotation.enumerations.TypePK;
import com.jmoordb.core.annotation.enumerations.TypeReferenced;
/**
* MongoDB
*/
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.conversions.Bson;
import com.nerys.model.Otp;
import com.nerys.model.*;


// </editor-fold>
@RequestScoped
public class OtpSupplier  implements Serializable{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
   ActionHistorySupplier actionHistorySupplier ;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Otp get(Supplier<? extendsOtp> s, Document document, Boolean... showError) ">

    public Otp get(Supplier<? extends Otp> s, Document document_, Boolean... showError) {
        Otp otp= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 otp.setIdotp(document_.getLong("idotp"));
	otp.setExpirationdate(document_.getDate("expirationdate"));
	otp.setIdapplicative(document_.getLong("idapplicative"));
	otp.setEmail(document_.getString("email"));
	otp.setIduser(document_.getLong("iduser"));
	otp.setIsexpired(document_.getBoolean("isexpired"));
	otp.setOtp(document_.getString("otp"));
	otp.setUsed(document_.getBoolean("used"));

	// Embedded List<actionHistory>
	List<ActionHistory> actionHistoryList = new ArrayList<>();
	List<Document> actionHistoryDoc = (List) document_.get("actionHistory");
	if( actionHistoryDoc == null || actionHistoryDoc.isEmpty()){


	}else{
		for( Document docActionHistory : actionHistoryDoc){
			ActionHistory actionHistory = actionHistorySupplier.get(ActionHistory::new, docActionHistory);
			actionHistoryList.add(actionHistory);
		}
	}
	otp.setActionHistory(actionHistoryList);
		

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return otp;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Otp getId(Supplier<? extendsOtp> s, Document document, Boolean... showError) ">

    public Otp getId(Supplier<? extends Otp> s, Document document_, Boolean... showError) {
        Otp otp= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 otp.setIdotp(document_.getLong("idotp"));

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return otp;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Otp putObjectId(Otp otp String _id, Boolean... showError) ">

    public Otp putObjectId(Otp otp, String _id, Boolean... showError) {
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return otp;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toDocument (Otp otp) ">

    public Document toDocument(Otp otp) {
        Document document_ = new Document();
        try {
	 
		document_.put("idotp",otp.getIdotp());
		document_.put("expirationdate",otp.getExpirationdate());
		document_.put("idapplicative",otp.getIdapplicative());
		document_.put("email",otp.getEmail());
		document_.put("iduser",otp.getIduser());
		document_.put("isexpired",otp.getIsexpired());
		document_.put("otp",otp.getOtp());
		document_.put("used",otp.getUsed());

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(otp.getActionHistory()));
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toDocument (List<Otp> otpList) ">

    public List<Document> toDocument(List<Otp> otpList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Otp otp : otpList){
		 Document document_ = new Document();
		document_.put("idotp",otp.getIdotp());
		document_.put("expirationdate",otp.getExpirationdate());
		document_.put("idapplicative",otp.getIdapplicative());
		document_.put("email",otp.getEmail());
		document_.put("iduser",otp.getIduser());
		document_.put("isexpired",otp.getIsexpired());
		document_.put("otp",otp.getOtp());
		document_.put("used",otp.getUsed());

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(otp.getActionHistory()));
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Bson toUpdate (Otp otp) ">

    public Bson toUpdate(Otp otp) {
        Bson update_ = Filters.empty();
        try {
        update_ = Updates.combine(
	 
		Updates.set("idotp",otp.getIdotp()),
		Updates.set("expirationdate",otp.getExpirationdate()),
		Updates.set("idapplicative",otp.getIdapplicative()),
		Updates.set("email",otp.getEmail()),
		Updates.set("iduser",otp.getIduser()),
		Updates.set("isexpired",otp.getIsexpired()),
		Updates.set("otp",otp.getOtp()),
		Updates.set("used",otp.getUsed()),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(otp.getActionHistory()))
	

        );
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return update_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Bson> toUpdate (List<Otp> otpList) ">

    public List<Bson> toUpdate(List<Otp> otpList) {
        List<Bson> bsonList_ = new ArrayList<>();
        try {
	 for(Otp otp : otpList){
		 Bson update_ = Filters.empty();
			update_ = Updates.combine(
	 
		Updates.set("idotp",otp.getIdotp()),
		Updates.set("expirationdate",otp.getExpirationdate()),
		Updates.set("idapplicative",otp.getIdapplicative()),
		Updates.set("email",otp.getEmail()),
		Updates.set("iduser",otp.getIduser()),
		Updates.set("isexpired",otp.getIsexpired()),
		Updates.set("otp",otp.getOtp()),
		Updates.set("used",otp.getUsed()),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(otp.getActionHistory()))
	

        );
		bsonList_.add(update_);
 
       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return bsonList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toReferenced (Otp otp) ">

    public Document toReferenced(Otp otp) {
        Document document_ = new Document();
        try {
	 
		document_.put("idotp",otp.getIdotp());
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toReferenced(List<Otp> otpList) ">

    public List<Document> toReferenced(List<Otp> otpList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Otp otp : otpList){
		 Document document_ = new Document();
		document_.put("idotp",otp.getIdotp());
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>

}