some content...package com.nerys.model;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import java.io.Serializable;
/**
* Java
*/
import java.time.LocalDateTime;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.UUID;
/**
* Jmoordb
*/
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import com.jmoordb.core.annotation.Referenced;
import com.jmoordb.core.annotation.enumerations.TypePK;
import com.jmoordb.core.annotation.enumerations.TypeReferenced;
/**
* MongoDB
*/
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.conversions.Bson;
import com.nerys.model.Cliente;
import com.nerys.model.*;


// </editor-fold>
@RequestScoped
public class ClienteSupplier  implements Serializable{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
   SedeSupplier sedeSupplier ;
    @Inject
   RepresentanteSupplier representanteSupplier ;
    @Inject
   ActionHistorySupplier actionHistorySupplier ;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Cliente get(Supplier<? extendsCliente> s, Document document, Boolean... showError) ">

    public Cliente get(Supplier<? extends Cliente> s, Document document_, Boolean... showError) {
        Cliente cliente= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 cliente.setIdcliente(document_.getLong("idcliente"));
	cliente.setCedularuc(document_.getString("cedularuc"));
	cliente.setTipocliente(document_.getString("tipocliente"));
	cliente.setDv(document_.getString("dv"));
	cliente.setName(document_.getString("name"));

	// Embedded List<sede>
	List<Sede> sedeList = new ArrayList<>();
	List<Document> sedeDoc = (List) document_.get("sede");
	if( sedeDoc == null || sedeDoc.isEmpty()){


	}else{
		for( Document docSede : sedeDoc){
			Sede sede = sedeSupplier.get(Sede::new, docSede);
			sedeList.add(sede);
		}
	}
	cliente.setSede(sedeList);
		

	// Embedded List<representante>
	List<Representante> representanteList = new ArrayList<>();
	List<Document> representanteDoc = (List) document_.get("representante");
	if( representanteDoc == null || representanteDoc.isEmpty()){


	}else{
		for( Document docRepresentante : representanteDoc){
			Representante representante = representanteSupplier.get(Representante::new, docRepresentante);
			representanteList.add(representante);
		}
	}
	cliente.setRepresentante(representanteList);
		
	cliente.setDireccion(document_.getString("direccion"));
	cliente.setTelefono(document_.getString("telefono"));
	cliente.setCelular(document_.getString("celular"));
	cliente.setFax(document_.getString("fax"));
	cliente.setEmail(document_.getString("email"));
	cliente.setObservacion(document_.getString("observacion"));
	cliente.setGobierno(document_.getBoolean("gobierno"));
	cliente.setActive(document_.getBoolean("active"));

	// Embedded List<actionHistory>
	List<ActionHistory> actionHistoryList = new ArrayList<>();
	List<Document> actionHistoryDoc = (List) document_.get("actionHistory");
	if( actionHistoryDoc == null || actionHistoryDoc.isEmpty()){


	}else{
		for( Document docActionHistory : actionHistoryDoc){
			ActionHistory actionHistory = actionHistorySupplier.get(ActionHistory::new, docActionHistory);
			actionHistoryList.add(actionHistory);
		}
	}
	cliente.setActionHistory(actionHistoryList);
		

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return cliente;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Cliente getId(Supplier<? extendsCliente> s, Document document, Boolean... showError) ">

    public Cliente getId(Supplier<? extends Cliente> s, Document document_, Boolean... showError) {
        Cliente cliente= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 cliente.setIdcliente(document_.getLong("idcliente"));

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return cliente;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Cliente putObjectId(Cliente cliente String _id, Boolean... showError) ">

    public Cliente putObjectId(Cliente cliente, String _id, Boolean... showError) {
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return cliente;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toDocument (Cliente cliente) ">

    public Document toDocument(Cliente cliente) {
        Document document_ = new Document();
        try {
	 
		document_.put("idcliente",cliente.getIdcliente());
		document_.put("cedularuc",cliente.getCedularuc());
		document_.put("tipocliente",cliente.getTipocliente());
		document_.put("dv",cliente.getDv());
		document_.put("name",cliente.getName());

	// Embedded List<sede>
		document_.put("sede",sedeSupplier.toDocument(cliente.getSede()));

	// Embedded List<representante>
		document_.put("representante",representanteSupplier.toDocument(cliente.getRepresentante()));
		document_.put("direccion",cliente.getDireccion());
		document_.put("telefono",cliente.getTelefono());
		document_.put("celular",cliente.getCelular());
		document_.put("fax",cliente.getFax());
		document_.put("email",cliente.getEmail());
		document_.put("observacion",cliente.getObservacion());
		document_.put("gobierno",cliente.getGobierno());
		document_.put("active",cliente.getActive());

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(cliente.getActionHistory()));
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toDocument (List<Cliente> clienteList) ">

    public List<Document> toDocument(List<Cliente> clienteList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Cliente cliente : clienteList){
		 Document document_ = new Document();
		document_.put("idcliente",cliente.getIdcliente());
		document_.put("cedularuc",cliente.getCedularuc());
		document_.put("tipocliente",cliente.getTipocliente());
		document_.put("dv",cliente.getDv());
		document_.put("name",cliente.getName());

	// Embedded List<sede>
		document_.put("sede",sedeSupplier.toDocument(cliente.getSede()));

	// Embedded List<representante>
		document_.put("representante",representanteSupplier.toDocument(cliente.getRepresentante()));
		document_.put("direccion",cliente.getDireccion());
		document_.put("telefono",cliente.getTelefono());
		document_.put("celular",cliente.getCelular());
		document_.put("fax",cliente.getFax());
		document_.put("email",cliente.getEmail());
		document_.put("observacion",cliente.getObservacion());
		document_.put("gobierno",cliente.getGobierno());
		document_.put("active",cliente.getActive());

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(cliente.getActionHistory()));
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Bson toUpdate (Cliente cliente) ">

    public Bson toUpdate(Cliente cliente) {
        Bson update_ = Filters.empty();
        try {
        update_ = Updates.combine(
	 
		Updates.set("idcliente",cliente.getIdcliente()),
		Updates.set("cedularuc",cliente.getCedularuc()),
		Updates.set("tipocliente",cliente.getTipocliente()),
		Updates.set("dv",cliente.getDv()),
		Updates.set("name",cliente.getName()),

	// Embedded List<sede>
		Updates.set("sede",sedeSupplier.toDocument(cliente.getSede())),

	// Embedded List<representante>
		Updates.set("representante",representanteSupplier.toDocument(cliente.getRepresentante())),
		Updates.set("direccion",cliente.getDireccion()),
		Updates.set("telefono",cliente.getTelefono()),
		Updates.set("celular",cliente.getCelular()),
		Updates.set("fax",cliente.getFax()),
		Updates.set("email",cliente.getEmail()),
		Updates.set("observacion",cliente.getObservacion()),
		Updates.set("gobierno",cliente.getGobierno()),
		Updates.set("active",cliente.getActive()),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(cliente.getActionHistory()))
	

        );
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return update_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Bson> toUpdate (List<Cliente> clienteList) ">

    public List<Bson> toUpdate(List<Cliente> clienteList) {
        List<Bson> bsonList_ = new ArrayList<>();
        try {
	 for(Cliente cliente : clienteList){
		 Bson update_ = Filters.empty();
			update_ = Updates.combine(
	 
		Updates.set("idcliente",cliente.getIdcliente()),
		Updates.set("cedularuc",cliente.getCedularuc()),
		Updates.set("tipocliente",cliente.getTipocliente()),
		Updates.set("dv",cliente.getDv()),
		Updates.set("name",cliente.getName()),

	// Embedded List<sede>
		Updates.set("sede",sedeSupplier.toDocument(cliente.getSede())),

	// Embedded List<representante>
		Updates.set("representante",representanteSupplier.toDocument(cliente.getRepresentante())),
		Updates.set("direccion",cliente.getDireccion()),
		Updates.set("telefono",cliente.getTelefono()),
		Updates.set("celular",cliente.getCelular()),
		Updates.set("fax",cliente.getFax()),
		Updates.set("email",cliente.getEmail()),
		Updates.set("observacion",cliente.getObservacion()),
		Updates.set("gobierno",cliente.getGobierno()),
		Updates.set("active",cliente.getActive()),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(cliente.getActionHistory()))
	

        );
		bsonList_.add(update_);
 
       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return bsonList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toReferenced (Cliente cliente) ">

    public Document toReferenced(Cliente cliente) {
        Document document_ = new Document();
        try {
	 
		document_.put("idcliente",cliente.getIdcliente());
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toReferenced(List<Cliente> clienteList) ">

    public List<Document> toReferenced(List<Cliente> clienteList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Cliente cliente : clienteList){
		 Document document_ = new Document();
		document_.put("idcliente",cliente.getIdcliente());
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>

}