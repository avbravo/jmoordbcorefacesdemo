some content...package com.nerys.model;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import java.io.Serializable;
/**
* Java
*/
import java.time.LocalDateTime;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.UUID;
/**
* Jmoordb
*/
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import com.jmoordb.core.annotation.Referenced;
import com.jmoordb.core.annotation.enumerations.TypePK;
import com.jmoordb.core.annotation.enumerations.TypeReferenced;
/**
* MongoDB
*/
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.conversions.Bson;
import com.nerys.model.User;
import com.nerys.model.*;


// </editor-fold>
@RequestScoped
public class UserSupplier  implements Serializable{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
   CentralViewRepository centralViewRepository ;
    @Inject
   CentralViewSupplier centralViewSupplier ;
    @Inject
   ProfileSupplier profileSupplier ;
    @Inject
   ActionHistorySupplier actionHistorySupplier ;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public User get(Supplier<? extendsUser> s, Document document, Boolean... showError) ">

    public User get(Supplier<? extends User> s, Document document_, Boolean... showError) {
        User user= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 user.setIduser(document_.getLong("iduser"));
	user.setUsername(document_.getString("username"));
	user.setCellphone(document_.getString("cellphone"));
	user.setEmail(document_.getString("email"));
	user.setIdentificationcard(document_.getString("identificationcard"));
	user.setSex(document_.getString("sex"));
	user.setSocialsecuritynumber(document_.getString("socialsecuritynumber"));
	user.setName(document_.getString("name"));
	user.setPassword(document_.getString("password"));
	user.setPhoto(document_.getString("photo"));
	user.setDateofbirth(document_.getDate("dateofbirth"));
	// @Referenced of [centralView how Referenced]
	CentralView centralView = centralViewSupplier.getId(CentralView::new,(Document) document_.get("central"));
	user.setCentralView(centralViewRepository.findByPk(centralView.getIdcentral()).get());
		

	// Embedded List<profile>
	List<Profile> profileList = new ArrayList<>();
	List<Document> profileDoc = (List) document_.get("profile");
	if( profileDoc == null || profileDoc.isEmpty()){


	}else{
		for( Document docProfile : profileDoc){
			Profile profile = profileSupplier.get(Profile::new, docProfile);
			profileList.add(profile);
		}
	}
	user.setProfile(profileList);
		
	user.setActive(document_.getBoolean("active"));
	user.setRecibirNotificacion(document_.getBoolean("recibirNotificacion"));
	user.setTheme(document_.getString("theme"));

	// Embedded List<actionHistory>
	List<ActionHistory> actionHistoryList = new ArrayList<>();
	List<Document> actionHistoryDoc = (List) document_.get("actionHistory");
	if( actionHistoryDoc == null || actionHistoryDoc.isEmpty()){


	}else{
		for( Document docActionHistory : actionHistoryDoc){
			ActionHistory actionHistory = actionHistorySupplier.get(ActionHistory::new, docActionHistory);
			actionHistoryList.add(actionHistory);
		}
	}
	user.setActionHistory(actionHistoryList);
		

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return user;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public User getId(Supplier<? extendsUser> s, Document document, Boolean... showError) ">

    public User getId(Supplier<? extends User> s, Document document_, Boolean... showError) {
        User user= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 user.setIduser(document_.getLong("iduser"));

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return user;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public User putObjectId(User user String _id, Boolean... showError) ">

    public User putObjectId(User user, String _id, Boolean... showError) {
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return user;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toDocument (User user) ">

    public Document toDocument(User user) {
        Document document_ = new Document();
        try {
	 
		document_.put("iduser",user.getIduser());
		document_.put("username",user.getUsername());
		document_.put("cellphone",user.getCellphone());
		document_.put("email",user.getEmail());
		document_.put("identificationcard",user.getIdentificationcard());
		document_.put("sex",user.getSex());
		document_.put("socialsecuritynumber",user.getSocialsecuritynumber());
		document_.put("name",user.getName());
		document_.put("password",user.getPassword());
		document_.put("photo",user.getPhoto());
		document_.put("dateofbirth",user.getDateofbirth());
 
	// Referenced of centralView
		document_.put("central",centralViewSupplier.toReferenced(user.getCentralView()));

	// Embedded List<profile>
		document_.put("profile",profileSupplier.toDocument(user.getProfile()));
		document_.put("active",user.getActive());
		document_.put("recibirNotificacion",user.getRecibirNotificacion());
		document_.put("theme",user.getTheme());

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(user.getActionHistory()));
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toDocument (List<User> userList) ">

    public List<Document> toDocument(List<User> userList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(User user : userList){
		 Document document_ = new Document();
		document_.put("iduser",user.getIduser());
		document_.put("username",user.getUsername());
		document_.put("cellphone",user.getCellphone());
		document_.put("email",user.getEmail());
		document_.put("identificationcard",user.getIdentificationcard());
		document_.put("sex",user.getSex());
		document_.put("socialsecuritynumber",user.getSocialsecuritynumber());
		document_.put("name",user.getName());
		document_.put("password",user.getPassword());
		document_.put("photo",user.getPhoto());
		document_.put("dateofbirth",user.getDateofbirth());
 
	// Referenced of centralView
		document_.put("central",centralViewSupplier.toReferenced(user.getCentralView()));

	// Embedded List<profile>
		document_.put("profile",profileSupplier.toDocument(user.getProfile()));
		document_.put("active",user.getActive());
		document_.put("recibirNotificacion",user.getRecibirNotificacion());
		document_.put("theme",user.getTheme());

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(user.getActionHistory()));
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Bson toUpdate (User user) ">

    public Bson toUpdate(User user) {
        Bson update_ = Filters.empty();
        try {
        update_ = Updates.combine(
	 
		Updates.set("iduser",user.getIduser()),
		Updates.set("username",user.getUsername()),
		Updates.set("cellphone",user.getCellphone()),
		Updates.set("email",user.getEmail()),
		Updates.set("identificationcard",user.getIdentificationcard()),
		Updates.set("sex",user.getSex()),
		Updates.set("socialsecuritynumber",user.getSocialsecuritynumber()),
		Updates.set("name",user.getName()),
		Updates.set("password",user.getPassword()),
		Updates.set("photo",user.getPhoto()),
		Updates.set("dateofbirth",user.getDateofbirth()),
 
	// ViewReferenced of centralView
		Updates.set("central",centralViewSupplier.toReferenced(user.getCentralView())),

	// Embedded List<profile>
		Updates.set("profile",profileSupplier.toDocument(user.getProfile())),
		Updates.set("active",user.getActive()),
		Updates.set("recibirNotificacion",user.getRecibirNotificacion()),
		Updates.set("theme",user.getTheme()),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(user.getActionHistory()))
	

        );
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return update_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Bson> toUpdate (List<User> userList) ">

    public List<Bson> toUpdate(List<User> userList) {
        List<Bson> bsonList_ = new ArrayList<>();
        try {
	 for(User user : userList){
		 Bson update_ = Filters.empty();
			update_ = Updates.combine(
	 
		Updates.set("iduser",user.getIduser()),
		Updates.set("username",user.getUsername()),
		Updates.set("cellphone",user.getCellphone()),
		Updates.set("email",user.getEmail()),
		Updates.set("identificationcard",user.getIdentificationcard()),
		Updates.set("sex",user.getSex()),
		Updates.set("socialsecuritynumber",user.getSocialsecuritynumber()),
		Updates.set("name",user.getName()),
		Updates.set("password",user.getPassword()),
		Updates.set("photo",user.getPhoto()),
		Updates.set("dateofbirth",user.getDateofbirth()),
 
	// ViewReferenced of centralView
		Updates.set("central",centralViewSupplier.toReferenced(user.getCentralView())),

	// Embedded List<profile>
		Updates.set("profile",profileSupplier.toDocument(user.getProfile())),
		Updates.set("active",user.getActive()),
		Updates.set("recibirNotificacion",user.getRecibirNotificacion()),
		Updates.set("theme",user.getTheme()),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(user.getActionHistory()))
	

        );
		bsonList_.add(update_);
 
       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return bsonList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toReferenced (User user) ">

    public Document toReferenced(User user) {
        Document document_ = new Document();
        try {
	 
		document_.put("iduser",user.getIduser());
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toReferenced(List<User> userList) ">

    public List<Document> toReferenced(List<User> userList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(User user : userList){
		 Document document_ = new Document();
		document_.put("iduser",user.getIduser());
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>

}