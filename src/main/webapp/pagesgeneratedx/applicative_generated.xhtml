some content...package com.nerys.model;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import java.io.Serializable;
/**
* Java
*/
import java.time.LocalDateTime;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.UUID;
/**
* Jmoordb
*/
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import com.jmoordb.core.annotation.Referenced;
import com.jmoordb.core.annotation.enumerations.TypePK;
import com.jmoordb.core.annotation.enumerations.TypeReferenced;
/**
* MongoDB
*/
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.conversions.Bson;
import com.nerys.model.Applicative;
import com.nerys.model.*;


// </editor-fold>
@RequestScoped
public class ApplicativeSupplier  implements Serializable{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
   ApplicativeroleSupplier applicativeroleSupplier ;
    @Inject
   EmailconfigurationSupplier emailconfigurationSupplier ;
    @Inject
   ApplicativeprivilegeSupplier applicativeprivilegeSupplier ;
    @Inject
   ActionHistorySupplier actionHistorySupplier ;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Applicative get(Supplier<? extendsApplicative> s, Document document, Boolean... showError) ">

    public Applicative get(Supplier<? extends Applicative> s, Document document_, Boolean... showError) {
        Applicative applicative= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 applicative.setIdapplicative(document_.getLong("idapplicative"));
	applicative.setActive(document_.getBoolean("active"));
	applicative.setApplicative(document_.getString("applicative"));
	applicative.setDescription(document_.getString("description"));
	applicative.setImage(document_.getString("image"));
	applicative.setPath(document_.getString("path"));
	applicative.setShortname(document_.getString("shortname"));

	// Embedded List<applicativerole>
	List<Applicativerole> applicativeroleList = new ArrayList<>();
	List<Document> applicativeroleDoc = (List) document_.get("applicativerole");
	if( applicativeroleDoc == null || applicativeroleDoc.isEmpty()){


	}else{
		for( Document docApplicativerole : applicativeroleDoc){
			Applicativerole applicativerole = applicativeroleSupplier.get(Applicativerole::new, docApplicativerole);
			applicativeroleList.add(applicativerole);
		}
	}
	applicative.setApplicativerole(applicativeroleList);
		

	// Embedded List<emailconfiguration>
	List<Emailconfiguration> emailconfigurationList = new ArrayList<>();
	List<Document> emailconfigurationDoc = (List) document_.get("emailconfiguration");
	if( emailconfigurationDoc == null || emailconfigurationDoc.isEmpty()){


	}else{
		for( Document docEmailconfiguration : emailconfigurationDoc){
			Emailconfiguration emailconfiguration = emailconfigurationSupplier.get(Emailconfiguration::new, docEmailconfiguration);
			emailconfigurationList.add(emailconfiguration);
		}
	}
	applicative.setEmailconfiguration(emailconfigurationList);
		

	// Embedded List<applicativeprivilege>
	List<Applicativeprivilege> applicativeprivilegeList = new ArrayList<>();
	List<Document> applicativeprivilegeDoc = (List) document_.get("applicativeprivilege");
	if( applicativeprivilegeDoc == null || applicativeprivilegeDoc.isEmpty()){


	}else{
		for( Document docApplicativeprivilege : applicativeprivilegeDoc){
			Applicativeprivilege applicativeprivilege = applicativeprivilegeSupplier.get(Applicativeprivilege::new, docApplicativeprivilege);
			applicativeprivilegeList.add(applicativeprivilege);
		}
	}
	applicative.setApplicativeprivilege(applicativeprivilegeList);
		

	// Embedded List<actionHistory>
	List<ActionHistory> actionHistoryList = new ArrayList<>();
	List<Document> actionHistoryDoc = (List) document_.get("actionHistory");
	if( actionHistoryDoc == null || actionHistoryDoc.isEmpty()){


	}else{
		for( Document docActionHistory : actionHistoryDoc){
			ActionHistory actionHistory = actionHistorySupplier.get(ActionHistory::new, docActionHistory);
			actionHistoryList.add(actionHistory);
		}
	}
	applicative.setActionHistory(actionHistoryList);
		

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return applicative;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Applicative getId(Supplier<? extendsApplicative> s, Document document, Boolean... showError) ">

    public Applicative getId(Supplier<? extends Applicative> s, Document document_, Boolean... showError) {
        Applicative applicative= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 applicative.setIdapplicative(document_.getLong("idapplicative"));

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return applicative;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Applicative putObjectId(Applicative applicative String _id, Boolean... showError) ">

    public Applicative putObjectId(Applicative applicative, String _id, Boolean... showError) {
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return applicative;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toDocument (Applicative applicative) ">

    public Document toDocument(Applicative applicative) {
        Document document_ = new Document();
        try {
	 
		document_.put("idapplicative",applicative.getIdapplicative());
		document_.put("active",applicative.getActive());
		document_.put("applicative",applicative.getApplicative());
		document_.put("description",applicative.getDescription());
		document_.put("image",applicative.getImage());
		document_.put("path",applicative.getPath());
		document_.put("shortname",applicative.getShortname());

	// Embedded List<applicativerole>
		document_.put("applicativerole",applicativeroleSupplier.toDocument(applicative.getApplicativerole()));

	// Embedded List<emailconfiguration>
		document_.put("emailconfiguration",emailconfigurationSupplier.toDocument(applicative.getEmailconfiguration()));

	// Embedded List<applicativeprivilege>
		document_.put("applicativeprivilege",applicativeprivilegeSupplier.toDocument(applicative.getApplicativeprivilege()));

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(applicative.getActionHistory()));
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toDocument (List<Applicative> applicativeList) ">

    public List<Document> toDocument(List<Applicative> applicativeList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Applicative applicative : applicativeList){
		 Document document_ = new Document();
		document_.put("idapplicative",applicative.getIdapplicative());
		document_.put("active",applicative.getActive());
		document_.put("applicative",applicative.getApplicative());
		document_.put("description",applicative.getDescription());
		document_.put("image",applicative.getImage());
		document_.put("path",applicative.getPath());
		document_.put("shortname",applicative.getShortname());

	// Embedded List<applicativerole>
		document_.put("applicativerole",applicativeroleSupplier.toDocument(applicative.getApplicativerole()));

	// Embedded List<emailconfiguration>
		document_.put("emailconfiguration",emailconfigurationSupplier.toDocument(applicative.getEmailconfiguration()));

	// Embedded List<applicativeprivilege>
		document_.put("applicativeprivilege",applicativeprivilegeSupplier.toDocument(applicative.getApplicativeprivilege()));

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(applicative.getActionHistory()));
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Bson toUpdate (Applicative applicative) ">

    public Bson toUpdate(Applicative applicative) {
        Bson update_ = Filters.empty();
        try {
        update_ = Updates.combine(
	 
		Updates.set("idapplicative",applicative.getIdapplicative()),
		Updates.set("active",applicative.getActive()),
		Updates.set("applicative",applicative.getApplicative()),
		Updates.set("description",applicative.getDescription()),
		Updates.set("image",applicative.getImage()),
		Updates.set("path",applicative.getPath()),
		Updates.set("shortname",applicative.getShortname()),

	// Embedded List<applicativerole>
		Updates.set("applicativerole",applicativeroleSupplier.toDocument(applicative.getApplicativerole())),

	// Embedded List<emailconfiguration>
		Updates.set("emailconfiguration",emailconfigurationSupplier.toDocument(applicative.getEmailconfiguration())),

	// Embedded List<applicativeprivilege>
		Updates.set("applicativeprivilege",applicativeprivilegeSupplier.toDocument(applicative.getApplicativeprivilege())),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(applicative.getActionHistory()))
	

        );
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return update_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Bson> toUpdate (List<Applicative> applicativeList) ">

    public List<Bson> toUpdate(List<Applicative> applicativeList) {
        List<Bson> bsonList_ = new ArrayList<>();
        try {
	 for(Applicative applicative : applicativeList){
		 Bson update_ = Filters.empty();
			update_ = Updates.combine(
	 
		Updates.set("idapplicative",applicative.getIdapplicative()),
		Updates.set("active",applicative.getActive()),
		Updates.set("applicative",applicative.getApplicative()),
		Updates.set("description",applicative.getDescription()),
		Updates.set("image",applicative.getImage()),
		Updates.set("path",applicative.getPath()),
		Updates.set("shortname",applicative.getShortname()),

	// Embedded List<applicativerole>
		Updates.set("applicativerole",applicativeroleSupplier.toDocument(applicative.getApplicativerole())),

	// Embedded List<emailconfiguration>
		Updates.set("emailconfiguration",emailconfigurationSupplier.toDocument(applicative.getEmailconfiguration())),

	// Embedded List<applicativeprivilege>
		Updates.set("applicativeprivilege",applicativeprivilegeSupplier.toDocument(applicative.getApplicativeprivilege())),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(applicative.getActionHistory()))
	

        );
		bsonList_.add(update_);
 
       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return bsonList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toReferenced (Applicative applicative) ">

    public Document toReferenced(Applicative applicative) {
        Document document_ = new Document();
        try {
	 
		document_.put("idapplicative",applicative.getIdapplicative());
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toReferenced(List<Applicative> applicativeList) ">

    public List<Document> toReferenced(List<Applicative> applicativeList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Applicative applicative : applicativeList){
		 Document document_ = new Document();
		document_.put("idapplicative",applicative.getIdapplicative());
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>

}