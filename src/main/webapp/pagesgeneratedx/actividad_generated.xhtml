some content...package com.nerys.model;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import java.io.Serializable;
/**
* Java
*/
import java.time.LocalDateTime;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.UUID;
/**
* Jmoordb
*/
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import com.jmoordb.core.annotation.Referenced;
import com.jmoordb.core.annotation.enumerations.TypePK;
import com.jmoordb.core.annotation.enumerations.TypeReferenced;
/**
* MongoDB
*/
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.conversions.Bson;
import com.nerys.model.Actividad;
import com.nerys.model.*;


// </editor-fold>
@RequestScoped
public class ActividadSupplier  implements Serializable{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
   ObjetivoRepository objetivoRepository ;
    @Inject
   ObjetivoSupplier objetivoSupplier ;
    @Inject
   ActionHistorySupplier actionHistorySupplier ;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Actividad get(Supplier<? extendsActividad> s, Document document, Boolean... showError) ">

    public Actividad get(Supplier<? extends Actividad> s, Document document_, Boolean... showError) {
        Actividad actividad= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 actividad.setIdactividad(document_.getLong("idactividad"));
	actividad.setCodigo(document_.getString("codigo"));
	actividad.setActividad(document_.getString("actividad"));
	actividad.setAnio(document_.getInteger("anio"));
	actividad.setActive(document_.getBoolean("active"));
	// @Referenced of [objetivo how Referenced]
	Objetivo objetivo = objetivoSupplier.getId(Objetivo::new,(Document) document_.get("objetivo"));
	actividad.setObjetivo(objetivoRepository.findByPk(objetivo.getIdobjetivo()).get());
		

	// Embedded List<actionHistory>
	List<ActionHistory> actionHistoryList = new ArrayList<>();
	List<Document> actionHistoryDoc = (List) document_.get("actionHistory");
	if( actionHistoryDoc == null || actionHistoryDoc.isEmpty()){


	}else{
		for( Document docActionHistory : actionHistoryDoc){
			ActionHistory actionHistory = actionHistorySupplier.get(ActionHistory::new, docActionHistory);
			actionHistoryList.add(actionHistory);
		}
	}
	actividad.setActionHistory(actionHistoryList);
		

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return actividad;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Actividad getId(Supplier<? extendsActividad> s, Document document, Boolean... showError) ">

    public Actividad getId(Supplier<? extends Actividad> s, Document document_, Boolean... showError) {
        Actividad actividad= s.get(); 
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
	 actividad.setIdactividad(document_.getLong("idactividad"));

         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return actividad;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Actividad putObjectId(Actividad actividad String _id, Boolean... showError) ">

    public Actividad putObjectId(Actividad actividad, String _id, Boolean... showError) {
            Boolean show = true;
        try {
            if (showError.length != 0) {
                show = showError[0];
            }
	
         } catch (Exception e) {
             if (show) {
                MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             }
         }
         return actividad;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toDocument (Actividad actividad) ">

    public Document toDocument(Actividad actividad) {
        Document document_ = new Document();
        try {
	 
		document_.put("idactividad",actividad.getIdactividad());
		document_.put("codigo",actividad.getCodigo());
		document_.put("actividad",actividad.getActividad());
		document_.put("anio",actividad.getAnio());
		document_.put("active",actividad.getActive());
 
	// Referenced of objetivo
		document_.put("objetivo",objetivoSupplier.toReferenced(actividad.getObjetivo()));

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(actividad.getActionHistory()));
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toDocument (List<Actividad> actividadList) ">

    public List<Document> toDocument(List<Actividad> actividadList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Actividad actividad : actividadList){
		 Document document_ = new Document();
		document_.put("idactividad",actividad.getIdactividad());
		document_.put("codigo",actividad.getCodigo());
		document_.put("actividad",actividad.getActividad());
		document_.put("anio",actividad.getAnio());
		document_.put("active",actividad.getActive());
 
	// Referenced of objetivo
		document_.put("objetivo",objetivoSupplier.toReferenced(actividad.getObjetivo()));

	// Embedded List<actionHistory>
		document_.put("actionHistory",actionHistorySupplier.toDocument(actividad.getActionHistory()));
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Bson toUpdate (Actividad actividad) ">

    public Bson toUpdate(Actividad actividad) {
        Bson update_ = Filters.empty();
        try {
        update_ = Updates.combine(
	 
		Updates.set("idactividad",actividad.getIdactividad()),
		Updates.set("codigo",actividad.getCodigo()),
		Updates.set("actividad",actividad.getActividad()),
		Updates.set("anio",actividad.getAnio()),
		Updates.set("active",actividad.getActive()),
 
	// Referenced of objetivo
		Updates.set("objetivo",objetivoSupplier.toReferenced(actividad.getObjetivo())),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(actividad.getActionHistory()))
	

        );
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return update_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Bson> toUpdate (List<Actividad> actividadList) ">

    public List<Bson> toUpdate(List<Actividad> actividadList) {
        List<Bson> bsonList_ = new ArrayList<>();
        try {
	 for(Actividad actividad : actividadList){
		 Bson update_ = Filters.empty();
			update_ = Updates.combine(
	 
		Updates.set("idactividad",actividad.getIdactividad()),
		Updates.set("codigo",actividad.getCodigo()),
		Updates.set("actividad",actividad.getActividad()),
		Updates.set("anio",actividad.getAnio()),
		Updates.set("active",actividad.getActive()),
 
	// Referenced of objetivo
		Updates.set("objetivo",objetivoSupplier.toReferenced(actividad.getObjetivo())),

	// Embedded List<actionHistory>
		Updates.set("actionHistory",actionHistorySupplier.toDocument(actividad.getActionHistory()))
	

        );
		bsonList_.add(update_);
 
       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return bsonList_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Document toReferenced (Actividad actividad) ">

    public Document toReferenced(Actividad actividad) {
        Document document_ = new Document();
        try {
	 
		document_.put("idactividad",actividad.getIdactividad());
	

         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return document_;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public List<Document> toReferenced(List<Actividad> actividadList) ">

    public List<Document> toReferenced(List<Actividad> actividadList) {
        List<Document> documentList_ = new ArrayList<>();
        try {
	 
	 for(Actividad actividad : actividadList){
		 Document document_ = new Document();
		document_.put("idactividad",actividad.getIdactividad());
		documentList_.add(document_);
	

       }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return documentList_;
     }
// </editor-fold>

}